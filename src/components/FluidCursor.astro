---
// FluidCursor.astro
---

<canvas id="background-stars-canvas"></canvas>
<canvas id="fluid-cursor-canvas"></canvas>

<script>
  import {
    Renderer,
    Camera,
    Transform,
    Mesh,
    Program,
    Geometry,
    Texture,
    RenderTarget,
  } from "https://cdn.skypack.dev/ogl";

  class FluidCursor {
    constructor() {
      this.canvas = document.getElementById("fluid-cursor-canvas");
      this.renderer = new Renderer({ canvas: this.canvas, alpha: true });
      this.gl = this.renderer.gl;

      // Set canvas size
      this.canvas.style.position = "fixed";
      this.canvas.style.top = "0";
      this.canvas.style.left = "0";
      this.canvas.style.pointerEvents = "none";
      this.canvas.style.zIndex = "9999";

      this.camera = new Camera(this.gl);
      this.camera.position.z = 1;

      this.scene = new Transform();

      this.mouse = { x: 0, y: 0 };
      this.velocity = { x: 0, y: 0 };
      this.lastMouse = { x: 0, y: 0 };

      this.initFluid();
      this.addEventListeners();
      this.resize();
      this.render();
    }

    initFluid() {
      // Create render targets for fluid simulation
      this.fbo = {
        read: new RenderTarget(this.gl, { width: 128, height: 128 }),
        write: new RenderTarget(this.gl, { width: 128, height: 128 }),
        swap: () => {
          let temp = this.fbo.read;
          this.fbo.read = this.fbo.write;
          this.fbo.write = temp;
        },
      };

      // Fluid simulation shaders
      const fluidVertex = `
        attribute vec2 position;
        varying vec2 vUv;
        void main() {
          vUv = position * 0.5 + 0.5;
          gl_Position = vec4(position, 0.0, 1.0);
        }
      `;

      const fluidFragment = `
        precision highp float;
        uniform sampler2D tFluid;
        uniform vec2 uMouse;
        uniform vec2 uVelocity;
        uniform float uTime;
        varying vec2 vUv;
        
        void main() {
          vec2 uv = vUv;
          vec4 fluid = texture2D(tFluid, uv);
          
          // Distance from mouse with smaller influence radius
          float dist = distance(uv, uMouse);
          float influence = 1.0 - smoothstep(0.0, 0.03, dist);
          
          // Add velocity based influence with more intensity
          vec2 vel = uVelocity * influence * 0.25;
          fluid.xy += vel;
          
          // Less decay for more persistent trails
          fluid *= 0.992;
          
          // Simple curl noise for organic movement (no visible patterns)
          float curl = sin(uTime * 0.0005 + uv.x * 5.0) * cos(uTime * 0.0005 + uv.y * 5.0) * 0.005;
          fluid.xy += curl;
          
          gl_FragColor = fluid;
        }
      `;

      // Display shader
      const displayVertex = `
        attribute vec2 position;
        varying vec2 vUv;
        void main() {
          vUv = position * 0.5 + 0.5;
          gl_Position = vec4(position, 0.0, 1.0);
        }
      `;

      const displayFragment = `
        precision highp float;
        uniform sampler2D tFluid;
        uniform vec2 uMouse;
        uniform float uTime;
        varying vec2 vUv;
        
        void main() {
          vec2 uv = vUv;
          vec4 fluid = texture2D(tFluid, uv);
          
          // Distance from mouse for glow effect
          float dist = distance(uv, uMouse);
          float glow = 1.0 - smoothstep(0.0, 0.3, dist);
          float innerGlow = 1.0 - smoothstep(0.0, 0.12, dist);
          
          // Colors matching your theme, but a bit darker

          // vec3 primaryColor = vec3(71.0/255.0, 19.0/255.0, 150.0/255.0);     // Darker purple
          // vec3 highlightColor = vec3(9.0/255.0, 0.0/255.0, 64.0/255.0);   
          vec3 primaryColor = vec3(0.35, 0.22, 0.59);     // Darker purple
          vec3 highlightColor = vec3(0.45, 0.32, 0.7);    

          // Only show effect around mouse and fluid movement
          vec3 color = vec3(0.0);

          // Reduce intensity for a less thick effect
          color += primaryColor * glow * 0.12;
          color += highlightColor * innerGlow * 0.08;

          // Add color only from fluid trails (mouse movement), less intense
          float fluidIntensity = length(fluid.xy) * 1.2;
          color += primaryColor * fluidIntensity * 0.18;

          // Lower alpha for a subtler effect
          float alpha = glow * 0.13 + innerGlow * 0.08 + fluidIntensity * 0.08;

          gl_FragColor = vec4(color, alpha);
        }
      `;

      // Create geometry (fullscreen quad)
      const geometry = new Geometry(this.gl, {
        position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },
      });

      // Fluid simulation program
      this.fluidProgram = new Program(this.gl, {
        vertex: fluidVertex,
        fragment: fluidFragment,
        uniforms: {
          tFluid: { value: this.fbo.read.texture },
          uMouse: { value: [0, 0] },
          uVelocity: { value: [0, 0] },
          uTime: { value: 0 },
        },
      });

      // Display program
      this.displayProgram = new Program(this.gl, {
        vertex: displayVertex,
        fragment: displayFragment,
        uniforms: {
          tFluid: { value: this.fbo.read.texture },
          uMouse: { value: [0, 0] },
          uTime: { value: 0 },
        },
      });

      this.mesh = new Mesh(this.gl, { geometry, program: this.fluidProgram });
      this.displayMesh = new Mesh(this.gl, {
        geometry,
        program: this.displayProgram,
      });
    }

    addEventListeners() {
      window.addEventListener("mousemove", (e) => {
        const rect = this.canvas.getBoundingClientRect();
        this.mouse.x = (e.clientX - rect.left) / rect.width;
        this.mouse.y = 1.0 - (e.clientY - rect.top) / rect.height;

        // Calculate velocity
        this.velocity.x = (this.mouse.x - this.lastMouse.x) * 10;
        this.velocity.y = (this.mouse.y - this.lastMouse.y) * 10;

        this.lastMouse.x = this.mouse.x;
        this.lastMouse.y = this.mouse.y;
      });

      window.addEventListener("resize", () => this.resize());
    }

    resize() {
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.camera.perspective({
        aspect: window.innerWidth / window.innerHeight,
      });
    }

    render() {
      const time = performance.now();

      // Update fluid simulation
      this.renderer.render({
        scene: this.mesh,
        camera: this.camera,
        target: this.fbo.write,
      });

      this.fbo.swap();

      // Update uniforms
      this.fluidProgram.uniforms.tFluid.value = this.fbo.read.texture;
      this.fluidProgram.uniforms.uMouse.value = [this.mouse.x, this.mouse.y];
      this.fluidProgram.uniforms.uVelocity.value = [
        this.velocity.x,
        this.velocity.y,
      ];
      this.fluidProgram.uniforms.uTime.value = time;

      this.displayProgram.uniforms.tFluid.value = this.fbo.read.texture;
      this.displayProgram.uniforms.uMouse.value = [this.mouse.x, this.mouse.y];
      this.displayProgram.uniforms.uTime.value = time;

      // Render to screen
      this.renderer.render({
        scene: this.displayMesh,
        camera: this.camera,
      });

      // Decay velocity
      this.velocity.x *= 0.9;
      this.velocity.y *= 0.9;

      requestAnimationFrame(() => this.render());
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new FluidCursor();
  });

  // --- Background Stars Animation ---
  class BackgroundStar {
    constructor(width, height) {
      this.reset(width, height);
      this.baseAlpha = 0.2 + Math.random() * 0.3;
      this.phase = Math.random() * Math.PI * 2;
    }
    reset(width, height) {
      this.x = Math.random() * width;
      this.y = Math.random() * height;
      this.radius = 0.5 + Math.random() * 1.2;
      this.twinkleSpeed = 0.8 + Math.random() * 0.7;
    }
    update(time, width, height) {
      // Twinkle using a sine wave
      this.alpha =
        this.baseAlpha + 0.25 * Math.sin(time * this.twinkleSpeed + this.phase);
      // Optionally, reset if out of bounds (not needed for static stars)
    }
    draw(ctx) {
      ctx.save();
      ctx.globalAlpha = Math.max(0, this.alpha);
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      ctx.fillStyle = "#fff";
      ctx.shadowColor = "#fff";
      ctx.shadowBlur = 4;
      ctx.fill();
      ctx.restore();
    }
  }

  function startBackgroundStars() {
    const canvas = document.getElementById("background-stars-canvas");
    const ctx = canvas.getContext("2d");
    let width = window.innerWidth;
    let height = window.innerHeight;
    canvas.width = width;
    canvas.height = height;
    canvas.style.position = "fixed";
    canvas.style.top = "0";
    canvas.style.left = "0";
    canvas.style.pointerEvents = "none";
    canvas.style.zIndex = "0";
    canvas.style.opacity = "0.7";

    const STAR_COUNT = Math.floor((width * height) / 2500); // density
    let stars = Array.from(
      { length: STAR_COUNT },
      () => new BackgroundStar(width, height)
    );

    function animate() {
      ctx.clearRect(0, 0, width, height);
      const time = performance.now() * 0.001;
      for (let star of stars) {
        star.update(time, width, height);
        star.draw(ctx);
      }
      requestAnimationFrame(animate);
    }

    window.addEventListener("resize", () => {
      width = window.innerWidth;
      height = window.innerHeight;
      canvas.width = width;
      canvas.height = height;
      stars = Array.from(
        { length: Math.floor((width * height) / 2500) },
        () => new BackgroundStar(width, height)
      );
    });

    animate();
  }

  document.addEventListener("DOMContentLoaded", startBackgroundStars);
</script>

<style>
  #background-stars-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 0;
    opacity: 0.7;
  }

  #fluid-cursor-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 1;
    mix-blend-mode: screen;
    opacity: 0.8;
    font-family: "Geist Mono", monospace;
    user-select: none;
  }
</style>
