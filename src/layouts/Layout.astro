---
import '../styles/reset.css';
import '../styles/globals.css';

import Background from '../components/Background.astro';
import Navbar from '../components/Navbar.astro';
import LayoutGrid from '../components/LayoutGrid.astro';
import { name, themeColor, twitterHandle } from 'spectre:globals';
import FluidCursor from '../components/FluidCursor.astro';
interface Props {
	title: string;
	description?: string;
	image?: ImageMetadata;
	pagefindIgnore?: boolean;
	article?: {
		createdAt: Date;
		updatedAt?: Date;
	};
}

const { title, description, image, pagefindIgnore, article } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />

		<title>{title}</title>
		{description && <meta name="description" content={description} />}
		<meta name="theme-color" content={themeColor}>

		<link rel="canonical" href={Astro.site} />

		<meta name="og:title" content={title} />
		{description && <meta name="og:description" content={description} />}
		<meta name="og:image" content={image?.src || '/img/og.png'} />
		<meta name="og:url" content={Astro.site} />
		{!article && <meta name="og:type" content="website" />}
		<meta name="og:locale" content="en" />

		{article && (
			<meta name="og:type" content="article" />
			<meta property="article:published_time" content={article.createdAt.toISOString()} />
			<meta name="author" content={name} />
		)}

		{article && article.updatedAt && (
			<meta property="article:modified_time" content={article.updatedAt.toISOString()} />
		)}

		<meta name="twitter:card" content="summary_large_image" />
		{twitterHandle && (
			<meta name="twitter:site" content={twitterHandle} />
			<meta name="twitter:creator" content={twitterHandle} />
		)}
		<meta name="twitter:title" content={title} />
		{description && <meta name="twitter:description" content={description} />}
		<meta name="twitter:image" content={image?.src || '/img/og.png'} />
	</head>
	<body>
		<main data-pagefind-ignore={pagefindIgnore}>
			<canvas id="shooting-stars-canvas"></canvas>
<canvas id="fluid-cursor-canvas"></canvas>
			<FluidCursor />
			<Navbar />
			<LayoutGrid>
				<slot name="left" slot="left" />
				<slot name="right" slot="right" />
			</LayoutGrid>
			<slot name="404" />
		</main>
		<Background />
		<script>
  // Shooting Stars Animation
  class ShootingStar {
    constructor(width, height) {
      this.reset(width, height);
    }
    reset(width, height) {
      this.x = Math.random() * width;
      this.y = Math.random() * height * 0.5;
      this.len = 80 + Math.random() * 60;
      this.speed = 2 + Math.random() * 2;
      this.angle = Math.PI / 4 + (Math.random() - 0.5) * 0.2;
      this.alpha = 0.7 + Math.random() * 0.3;
      this.life = 0;
      this.maxLife = 60 + Math.random() * 40;
    }
    update(width, height) {
      this.x += Math.cos(this.angle) * this.speed;
      this.y += Math.sin(this.angle) * this.speed;
      this.life++;
      if (this.x > width || this.y > height || this.life > this.maxLife) {
        this.reset(width, height);
      }
    }
    draw(ctx) {
      ctx.save();
      ctx.globalAlpha = this.alpha;
      ctx.strokeStyle = 'white';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.x - Math.cos(this.angle) * this.len, this.y - Math.sin(this.angle) * this.len);
      ctx.stroke();
      ctx.restore();
    }
  }

  function startShootingStars() {
    const canvas = document.getElementById('shooting-stars-canvas');
    const ctx = canvas.getContext('2d');
    let width = window.innerWidth;
    let height = window.innerHeight;
    canvas.width = width;
    canvas.height = height;
    canvas.style.position = 'fixed';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.pointerEvents = 'none';
    canvas.style.zIndex = '0';
    canvas.style.opacity = '0.7';
	

    let stars = Array.from({ length: 8 }, () => new ShootingStar(width, height));

    function animate() {
      ctx.clearRect(0, 0, width, height);
      for (let star of stars) {
        star.update(width, height);
        star.draw(ctx);
      }
      requestAnimationFrame(animate);
    }

    window.addEventListener('resize', () => {
      width = window.innerWidth;
      height = window.innerHeight;
      canvas.width = width;
      canvas.height = height;
      stars.forEach(star => star.reset(width, height));
    });

    animate();
  }

  document.addEventListener('DOMContentLoaded', startShootingStars);
</script>
	</body>
</html>
